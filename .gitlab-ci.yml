# .gitlab-ci.yml
image: python:3.12-slim

# Global variables
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"

# Cache configuration
cache:
  paths:
    - .cache/pip
    - .cache/uv
    - .venv/

# Stages
stages:
  - setup
  - test
  - lint

# Install uv and dependencies
.install_uv: &install_uv
  before_script:
    - apt-get update && apt-get install -y curl
    - curl -LsSf https://astral.sh/uv/install.sh | sh
    - source $HOME/.cargo/env
    - uv --version

# Setup job
setup:
  stage: setup
  <<: *install_uv
  script:
    - uv venv
    - source .venv/bin/activate
    - uv pip install -e .
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour

# Test job
test:
  stage: test
  <<: *install_uv
  dependencies:
    - setup
  script:
    - source .venv/bin/activate
    - uv pip install pytest pytest-cov
    - pytest --cov=src --cov-report=xml --cov-report=html
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week

# Linting job
lint:
  stage: lint
  <<: *install_uv
  dependencies:
    - setup
  script:
    - source .venv/bin/activate
    - uv pip install ruff black mypy
    - ruff check .
    - black --check .
    - mypy src/
  allow_failure: true

# Type checking
type-check:
  stage: lint
  <<: *install_uv
  dependencies:
    - setup
  script:
    - source .venv/bin/activate
    - uv pip install mypy
    - mypy src/
  allow_failure: true

# Security check
security:
  stage: lint
  <<: *install_uv
  dependencies:
    - setup
  script:
    - source .venv/bin/activate
    - uv pip install bandit safety
    - bandit -r src/
    - safety check
  allow_failure: true